<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Chip Senkbeil</title><link>https://chipsenkbeil.com/posts/</link><description>Recent content in Posts on Chip Senkbeil</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Thu, 09 Sep 2021 00:00:00 -0500</lastBuildDate><atom:link href="https://chipsenkbeil.com/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Applying GPG and Yubikey: Part 6 (Setting up Yubikeys)</title><link>https://chipsenkbeil.com/posts/applying-gpg-and-yubikey-part-6-setting-up-yubikeys/</link><pubDate>Thu, 09 Sep 2021 00:00:00 -0500</pubDate><guid>https://chipsenkbeil.com/posts/applying-gpg-and-yubikey-part-6-setting-up-yubikeys/</guid><description>&lt;p>
As a reminder, you can check out my
&lt;a href="https://chipsenkbeil.com/posts/applying-gpg-and-yubikey-part-1-overview">overview post&lt;/a> if you&amp;#39;re
curious about why and in what ways I started using GPG and Yubikey. If you
haven&amp;#39;t set up your GPG keys yet, I also talk about a simple flow
&lt;a href="https://chipsenkbeil.com/posts/applying-gpg-and-yubikey-part-2-setup">in my second post&lt;/a>.&lt;/p>
&lt;p>
Today, we&amp;#39;re diving into setting up your Yubikey to host your GPG subkeys
created in parts &lt;a href="https://chipsenkbeil.com/posts/applying-gpg-and-yubikey-part-3-encryption">3&lt;/a>,
&lt;a href="https://chipsenkbeil.com/posts/applying-gpg-and-yubikey-part-4-signing">4&lt;/a>, and
&lt;a href="https://chipsenkbeil.com/posts/applying-gpg-and-yubikey-part-5-authentication">5&lt;/a>.&lt;/p>
&lt;div id="outline-container-headline-1" class="outline-2">
&lt;h2 id="headline-1">
Yubikey
&lt;/h2>
&lt;div id="outline-text-headline-1" class="outline-text-2">
&lt;p>
I&amp;#39;ve got multiple Yubikeys configured across different devices and primarily use
them for password management and SSH authentication. Rather than keeping
physical subkeys on each of these machines, I instead have a dedicated Yubikey
for each device that hosts the subkeys, keeping them protected from direct
exposure.&lt;/p></description></item><item><title>Applying GPG and Yubikey: Part 5 (Authentication)</title><link>https://chipsenkbeil.com/posts/applying-gpg-and-yubikey-part-5-authentication/</link><pubDate>Sun, 06 Oct 2019 00:00:00 -0500</pubDate><guid>https://chipsenkbeil.com/posts/applying-gpg-and-yubikey-part-5-authentication/</guid><description>&lt;p>
As a reminder, you can check out my
&lt;a href="https://chipsenkbeil.com/posts/applying-gpg-and-yubikey-part-1-overview">overview post&lt;/a> if you&amp;#39;re
curious about why and in what ways I started using GPG and Yubikey. If you
haven&amp;#39;t set up your GPG keys yet, I also talk about a simple flow
&lt;a href="https://chipsenkbeil.com/posts/applying-gpg-and-yubikey-part-2-setup">in my second post&lt;/a>.&lt;/p>
&lt;p>
Today, we&amp;#39;re going specifically into using GPG for authentication for SSHing
into remote servers and associating with Github.&lt;/p>
&lt;div id="outline-container-headline-1" class="outline-2">
&lt;h2 id="headline-1">
Using my GPG key for authenticating over SSH
&lt;/h2>
&lt;div id="outline-text-headline-1" class="outline-text-2">
&lt;p>
One handy use case for GPG keys related to authentication is using a GPG key to
access remote servers over SSH. Rather than using password-based authentication
or SSH public key authentication via &lt;code class="verbatim">ssh-keygen&lt;/code>, we can leverage a GPG key
with authentication capabilities to connect instead.&lt;/p></description></item><item><title>Applying GPG and Yubikey: Part 4 (Signing)</title><link>https://chipsenkbeil.com/posts/applying-gpg-and-yubikey-part-4-signing/</link><pubDate>Mon, 02 Sep 2019 00:00:00 -0500</pubDate><guid>https://chipsenkbeil.com/posts/applying-gpg-and-yubikey-part-4-signing/</guid><description>&lt;p>
As a reminder, you can check out
&lt;a href="https://chipsenkbeil.com/posts/applying-gpg-and-yubikey-part-1-overview">overview post&lt;/a> if you&amp;#39;re
curious about why and in what ways I started using GPG and Yubikey. If you
haven&amp;#39;t set up your GPG keys yet, I also talk about a simple flow
&lt;a href="https://chipsenkbeil.com/posts/applying-gpg-and-yubikey-part-2-setup">in my second post&lt;/a>. Finally,
the email signing section expects you to have already set up encryption, so you
should really check out &lt;a href="https://chipsenkbeil.com/posts/applying-gpg-and-yubikey-part-3-encryption">my third post&lt;/a> regarding encryption setup with neomutt.&lt;/p>
&lt;p>
Today, we&amp;#39;re going specifically into using GPG for signing email and git
commits.&lt;/p></description></item><item><title>Applying GPG and Yubikey: Part 3 (Encryption)</title><link>https://chipsenkbeil.com/posts/applying-gpg-and-yubikey-part-3-encryption/</link><pubDate>Sun, 01 Sep 2019 00:00:00 -0500</pubDate><guid>https://chipsenkbeil.com/posts/applying-gpg-and-yubikey-part-3-encryption/</guid><description>&lt;p>
As a reminder, you can check out
&lt;a href="https://chipsenkbeil.com/posts/applying-gpg-and-yubikey-part-1-overview">overview post&lt;/a> if you&amp;#39;re
curious about why and in what ways I started using GPG and Yubikey. If you
haven&amp;#39;t set up your GPG keys yet, I also talk about a simple flow
&lt;a href="https://chipsenkbeil.com/posts/applying-gpg-and-yubikey-part-2-setup">in my second post&lt;/a>.&lt;/p>
&lt;p>
Today, we&amp;#39;re going specifically into using GPG for encryption and how to
integrate GPG into &lt;a href="https://passwordstore.org/">pass&lt;/a> and
&lt;a href="https://neomutt.org/">neomutt&lt;/a>.&lt;/p>
&lt;div id="outline-container-headline-1" class="outline-2">
&lt;h2 id="headline-1">
Refresher of current state
&lt;/h2>
&lt;div id="outline-text-headline-1" class="outline-text-2">
&lt;p>
At this point, we have our primary key for signing and certifying (SC) other
keys. You should also notice a second key (labelled as a subkey here) that is
purely for encryption (E). We will be using that encryption key for our
utilities today.&lt;/p></description></item><item><title>Applying GPG and Yubikey: Part 2 (Setup GPG Keys)</title><link>https://chipsenkbeil.com/posts/applying-gpg-and-yubikey-part-2-setup-primary-gpg-key/</link><pubDate>Fri, 16 Aug 2019 00:00:00 -0500</pubDate><guid>https://chipsenkbeil.com/posts/applying-gpg-and-yubikey-part-2-setup-primary-gpg-key/</guid><description>&lt;p>
If you haven&amp;#39;t read &lt;a href="https://chipsenkbeil.com/posts/applying-gpg-and-yubikey-part-1-overview">my overview post&lt;/a>, feel free to check it out to get an idea of why and how I
started using GPG and Yubikey.&lt;/p>
&lt;p>
Today we&amp;#39;ll be diving into how to set up a new master GPG key and configure it
for use with the &lt;a href="https://passwordstore.org/">pass&lt;/a> utility. Additionally,
we&amp;#39;ll run through the process to create subkeys with the idea of eventually
storing these on Yubikeys.&lt;/p>
&lt;div id="outline-container-headline-1" class="outline-2">
&lt;h2 id="headline-1">
Setting up a primary GPG key
&lt;/h2>
&lt;div id="outline-text-headline-1" class="outline-text-2">
&lt;p>
Although I knew I had an old key floating around from previous use, I wanted to
start from scratch. From reading a variety of guides and documentation online, I
knew that I wanted to create a new 4096-bit long RSA key. The time needed
generate such a key on modern hardware is negligible and provides the maximum
protection offered today. Luckily, the GPG interface has improved drastically
since I first used it, so this process - and all of the processes I&amp;#39;ll discuss
later - has been relatively painless.&lt;/p></description></item><item><title>Applying GPG and Yubikey: Part 1 (Overview)</title><link>https://chipsenkbeil.com/posts/applying-gpg-and-yubikey-part-1-overview/</link><pubDate>Mon, 12 Aug 2019 00:00:00 -0500</pubDate><guid>https://chipsenkbeil.com/posts/applying-gpg-and-yubikey-part-1-overview/</guid><description>&lt;p>
Today is going to be the first in a series of posts I want to write about
applying GPG and YubiKey. I won&amp;#39;t pretend that I am an expert on either GPG or
Yubikey. Instead, I&amp;#39;ll be focusing on how I have been using GPG and a variety of
Yubikey devices to enhance my computer experience.&lt;/p>
&lt;p>
In this post, I&amp;#39;m going to dive into GPG and YubiKey at a high level and explain
what they are to my understanding and how I am using them.&lt;/p></description></item><item><title>Finding My Balance</title><link>https://chipsenkbeil.com/posts/finding-my-balance/</link><pubDate>Fri, 22 Mar 2019 00:00:00 -0500</pubDate><guid>https://chipsenkbeil.com/posts/finding-my-balance/</guid><description>&lt;p>
Writing blog posts is hard, at least for me. What is a good topic to discuss?
When can I find the time to write the content? How can I stay focused long
enough to finish a post? How do I understand if the post was a hit?&lt;/p>
&lt;p>
Interestingly enough, the challenges posed by those questions share similarities
with those that I&amp;#39;ve faced as a Solutions Engineer, and it&amp;#39;s these challenges
and how I&amp;#39;ve approached tackling them that I want to discuss now.&lt;/p></description></item><item><title>Breaking Down the Zsh Notes Function</title><link>https://chipsenkbeil.com/posts/breaking-down-the-zsh-notes-function/</link><pubDate>Sun, 08 Jul 2018 00:00:00 -0500</pubDate><guid>https://chipsenkbeil.com/posts/breaking-down-the-zsh-notes-function/</guid><description>&lt;p>
Earlier, I discussed my need to have method to jot down notes quickly and
comfortably on a computer. I wanted the setup to be as painless as possible
while also giving me the flexibility I desired to extend the note-taking method.&lt;/p>
&lt;p>
Being a lightweight user of zsh - not leveraging many plugins or additional
functionality - I decided to explore writing a zsh function to be exposed in my
shell. This function&amp;#39;s goal was to manage my notes, providing functionality to
list existing notes, create new notes, and delete old notes. At the end of the
day, I arrived at a 122 line zsh function as seen
&lt;a href="https://chipsenkbeil.com/posts/breaking-down-the-zsh-notes-function/#source-code">at the bottom of this post&lt;/a>.&lt;/p></description></item><item><title>Reducing the Barrier to Entry in Note Taking</title><link>https://chipsenkbeil.com/posts/reducing-the-barrier-to-entry-in-note-taking/</link><pubDate>Sun, 01 Jul 2018 00:00:00 -0500</pubDate><guid>https://chipsenkbeil.com/posts/reducing-the-barrier-to-entry-in-note-taking/</guid><description>&lt;div id="outline-container-headline-1" class="outline-2">
&lt;h2 id="headline-1">
The Challenge
&lt;/h2>
&lt;div id="outline-text-headline-1" class="outline-text-2">
&lt;p>
One of my biggest challenges to accomplishing something is the barrier to entry.
Starting a project, exercising, and even writing this blog post take genuine
effort for me to do. After realizing this as one of my biggest obstacles to
getting things done, I&amp;#39;ve dedicated quite a few cycles of my time toward
figuring out ways to reduce the initial friction. For the case of taking notes,
this involved both providing a quick way to get started as well as a comfortable
environment to write notes.&lt;/p></description></item><item><title>CSS Masonry Layout Attempts</title><link>https://chipsenkbeil.com/posts/css-masonry-layout-attempts/</link><pubDate>Wed, 02 Sep 2015 00:00:00 -0500</pubDate><guid>https://chipsenkbeil.com/posts/css-masonry-layout-attempts/</guid><description>&lt;p>
I spent two days investigating this and could not find a solution that worked.
Eventually, I gave up and added the Masonry Javascript library. My two attempts
were as follows:&lt;/p>
&lt;div id="outline-container-headline-1" class="outline-2">
&lt;h2 id="headline-1">
Using CSS Columns
&lt;/h2>
&lt;div id="outline-text-headline-1" class="outline-text-2">
&lt;p>
CSS Columns enabled an easy, powerful way to spread page summaries across
multiple columns. Furthermore, you can prevent page summaries from being broken
up in the middle by using &lt;code class="verbatim">column-break-inside: avoid;&lt;/code>. However, I had no way
to order the page summaries dynamically such that the most recent summaries were
at the top (from left to right) and older summaries were found further down.
Instead, this resulted in the latest summary starting in the top left with older
summaries going down the first column and into the second, etc.&lt;/p></description></item><item><title>tmux with XMonad Bindings</title><link>https://chipsenkbeil.com/posts/tmux-with-xmonad-bindings/</link><pubDate>Tue, 24 Dec 2013 00:00:00 -0600</pubDate><guid>https://chipsenkbeil.com/posts/tmux-with-xmonad-bindings/</guid><description>&lt;div id="outline-container-headline-1" class="outline-2">
&lt;h2 id="headline-1">
The Reason
&lt;/h2>
&lt;div id="outline-text-headline-1" class="outline-text-2">
&lt;p>
I&amp;#39;ve been playing around with &lt;code class="verbatim">tmux&lt;/code> a lot lately and have come to like it quite
a lot for the panes and windows - something I used quite a lot with my XMonad
setup on my old Fujitsu laptop. The panes act as my individual terminals with
which I can write code, read documentation, chat on IRC (using &lt;code class="verbatim">weechat&lt;/code> or
&lt;code class="verbatim">irssi&lt;/code>), play music, etc. In other words, I do quite a lot from within
terminals and being able to split up a terminal into panes (like XMonad
launching tiled terminals) is quite nice. Furthermore, treating the windows as
my workspaces lets me quickly organize myself just like with XMonad.&lt;/p></description></item></channel></rss>